@page "/campaigns/new"
@inject AppDbContext DbContext
@inject CampaignBuilder CampaignBuilder;
@inject NavigationManager NavigationManager

<h1>Create New Campaign</h1>

<h2>Scaffold</h2>
<form>
    <div class="form-group">
        <label for="language">Language</label>
        <select class="form-control" id="language" name="language" @bind="_language">
            <option>English</option>
            <option>한국어</option>
            <option>日本語</option>
        </select>
    </div>
    <div class="form-group">
        <label for="background">Background</label>
        <select class="form-control" id="background" name="background" @bind="_background">
            <option>Morden</option>
            <option>Cyberfunk</option>
            <option>Fantasy</option>
        </select>
    </div>
    <div class="form-group">
        <label for="num_of_suspects">Number of suspects</label>
        <input id="num_of_suspects" type="number" class="form-control" min="2" max="10" @bind-value="_suspects" />
    </div>

    <button type="button" class="btn btn-primary" @onclick="Scaffold" disabled=@_loading>Next</button>
</form>

@if (_draft != null)
{
    <h2>Review Draft</h2>
    <EditForm Model="_draft" OnSubmit="HandleSubmit">
        <h3>Overview</h3>
        <div>
            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="_draft.Title" class="form-control" />
        </div>
        <div>
            <label for="plot">Plot:</label>
            <InputTextArea id="plot" @bind-Value="_draft.Plot" class="form-control" />
        </div>
        <hr />

        <h3>Victim</h3>
        <CharacterCardForm Character="@_draft.Victim" Plot="@_draft.Plot" Background="@_background" />
        <hr />
        
        <h3>Suspects</h3>
        <div class="row">
            @foreach (var suspect in _draft.Suspects)
            {
                <CharacterCardForm Character="@suspect" Campaign="_draft" Background="@_background" />
            }
        </div>
        <hr />

        <h3>Offender</h3>
        <div>
            <label for="offender">Name:</label>
            <select id="offender" class="form-select" @onchange="(e) => { UpdateOffender((string)e.Value); }">
                @foreach (var suspect in _draft.Suspects)
                {
                    <option selected=@(suspect.Name == _draft.Offender.Name)>@suspect.Name</option>
                }
            </select>
            <label for="motive">Motive:</label>
            <InputText id="motive" @bind-Value="_draft.Motive" class="form-control" />
            <label for="method">Method:</label>
            <InputTextArea id="method" @bind-Value="_draft.Method" class="form-control" />
        </div>
        
        <h3>Clues</h3>
        <button type="button" class="form-control btn" @onclick="AddClue">Add Clue</button>
        <div class="row">
            @foreach (var clue in _draft.Clues)
            {
                <ClueCardForm Clue="@clue" OnClueDeleted="DeleteClue" />
            }
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    Campaign _draft;

    bool _loading;

    string _language;

    string _background;

    int _suspects;

    private async Task Scaffold()
    {
        _loading = true;
        _draft = await CampaignBuilder.GenerateDraftAsnyc(
            _background,
            _suspects,
            _language,
            default
        );
        UpdateOffender(_draft.Offender.Name);
        _loading = false;
    }

    public void UpdateOffender(string name)
    {
        _draft.Offender = _draft.Suspects.First(c => c.Name == name);
    }

    private void DeleteClue(Clue clue)
    {
        _draft.Clues.Remove(clue);
    }

    private async Task HandleSubmit(EditContext editContext)
    {
        _draft.OpenAIFileId = await CampaignBuilder.UploadFileAsync(_draft, default);
        await DbContext.Campaigns.AddAsync(_draft);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/campaigns");
    }

    private async Task AddClue()
    {
        Clue clue = await CampaignBuilder.CreateClueAsync(_draft, default);
        _draft.Clues.Add(clue);
    }
}
