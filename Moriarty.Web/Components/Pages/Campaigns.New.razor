@page "/campaigns/new"
@inject AppDbContext DbContext
@inject CampaignBuilder CampaignBuilder;
@inject NavigationManager NavigationManager

<h1>Create New Campaign</h1>

<h2>Scaffold</h2>
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link @(_scaffoldMode == ScaffoldMode.Manual ? "active" : "")" @onclick="@(() => { _scaffoldMode = ScaffoldMode.Manual;})">Manual</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(_scaffoldMode == ScaffoldMode.Extract ? "active" : "")" @onclick="@(() => { _scaffoldMode = ScaffoldMode.Extract; })">Extract from novels</a>
    </li>
</ul>
<form>
    <div class="form-group">
        <label for="language">Language</label>
        <select class="form-control" id="language" name="language" @bind="_language">
            <option>English</option>
            <option>한국어</option>
            <option>日本語</option>
        </select>
    </div>
    @if (_scaffoldMode == ScaffoldMode.Manual)
    {
        <div class="form-group">
            <label for="background">Background</label>
            <select class="form-control" id="background" name="background" @bind="_background">
                <option>Morden</option>
                <option>Cyberfunk</option>
                <option>Fantasy</option>
            </select>
        </div>
        <div class="form-group">
            <label for="num_of_suspects">Number of suspects</label>
            <input id="num_of_suspects" type="number" class="form-control" min="2" max="10" @bind-value="_suspects"/>
        </div>
        <div class="form-group">
            <label for="keywords">Keywords</label>
            <input id="keywords" type="text" class="form-control" placeholder="e.g., poison, locked room" @bind-value="_keywords"/>
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="novelTitle">Novel Title</label>
            <input id="novelTitle" class="form-control" @bind-value="_novelTitle" />
            <label for="novelAuthor">Author</label>
            <input id="novelAuthor" class="form-control" @bind-value="_novelAuthor" />
        </div>
    }
    <div class="form-group">
        <button type="button" class="btn btn-primary form-control" @onclick="Scaffold" disabled=@_waitingDraft>
            @if (_waitingDraft)
            {
            <i class="fa-solid fa-spinner fa-spin"></i>
            }
            else
            {
            @:Next
            }
        </button>
    </div>
</form>

@if (_draft != null)
{
    <hr />
    <h2>Review Draft</h2>
    <EditForm Model="_draft" OnSubmit="HandleSubmit">
        <h3>Overview</h3>
        <div>
            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="_draft.Title" class="form-control" />
        </div>
        <div>
            <label for="plot">Plot:</label>
            <InputTextArea id="plot" @bind-Value="_draft.Plot" class="form-control" rows="8" />
        </div>
        <hr />

        <h3>Victim</h3>
        <CharacterCardForm Character="@_draft.Victim" Campaign="@_draft" Background="@_background" />
        <hr />
        
        <h3>Suspects</h3>
        <div class="row">
            @foreach (var suspect in _draft.Suspects)
            {
                <CharacterCardForm Character="@suspect" Campaign="_draft" Background="@_background" />
            }
        </div>
        <hr />

        <h3>Offender</h3>
        <div>
            <label for="offender">Name:</label>
            <select id="offender" class="form-select" @onchange="(e) => { UpdateOffender((string)e.Value); }">
                @foreach (var suspect in _draft.Suspects)
                {
                    <option selected=@(suspect.Name == _draft.Offender.Name)>@suspect.Name</option>
                }
            </select>
            <label for="motive">Motive:</label>
            <InputText id="motive" @bind-Value="_draft.Motive" class="form-control" />
            <label for="method">Method:</label>
            <InputTextArea id="method" @bind-Value="_draft.Method" class="form-control" />
        </div>
        <hr />
        
        <h3>Clues</h3>
        <div class="row">
            @foreach (var clue in _draft.Clues)
            {
                <ClueCardForm Clue="@clue" OnClueDeleted="DeleteClue" />
            }
            <div class="card col-sm-4">
                <div class="card-body">
                    <button type="button" class="btn btn-secondary form-control" @onclick="AddClue">
                        @if (_waitingClue)
                        {
                            <i class="fa-solid fa-spinner fa-spin"></i>
                        }
                        else
                        {
                            @:Add Clue
                        }
                    </button>
                </div>
            </div>
        </div>
        <hr />

        <button type="submit" class="btn btn-primary form-control">Submit</button>
    </EditForm>
}

@code {
    Campaign _draft;

    bool _waitingDraft;

    string _language;

    string _background;

    int _suspects = 3;

    string _keywords;
    
    bool _waitingClue;
    
    private ScaffoldMode _scaffoldMode = ScaffoldMode.Manual;

    private string _novelTitle;

    private string _novelAuthor;

    private async Task Scaffold()
    {
        _waitingDraft = true;
        if (_scaffoldMode == ScaffoldMode.Manual)
        {
            _draft = await CampaignBuilder.GenerateDraftAsnyc(
                _background,
                _suspects,
                _keywords,
                _language,
                default
            );   
        }
        else
        {
            _draft = await CampaignBuilder.GenerateDraftByNovelAsnyc(
                _novelAuthor,
                _novelTitle,
                _language,
                cancellationToken: default
            );
        }
        UpdateOffender(_draft.Offender.Name);
        _waitingDraft = false;
    }

    public void UpdateOffender(string name)
    {
        _draft.Offender = _draft.Suspects.First(c => c.Name == name);
    }

    private void DeleteClue(Clue clue)
    {
        _draft.Clues.Remove(clue);
    }

    private async Task HandleSubmit(EditContext editContext)
    {
        _draft.OpenAIFileId = await CampaignBuilder.UploadFileAsync(_draft, default);
        await DbContext.Campaigns.AddAsync(_draft);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/campaigns");
    }

    private async Task AddClue()
    {
        _waitingClue = true;
        Clue clue = await CampaignBuilder.CreateClueAsync(_draft, default);
        _draft.Clues.Add(clue);
        _waitingClue = false;
    }
    
    public enum ScaffoldMode
    {
        Manual,
        Extract
    }
}
