@page "/campaigns/{CampaignId:guid}/playground"
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@inject GameMaster GameMaster
@inject MarkdownService MarkdownService
@inject GameBoardService GameBoardService

@code {
    [Parameter]
    public Guid CampaignId { get; set; }

    private readonly List<ChatMessage> _messages = [];
    
    private record ChatMessage(string Sender, string Text);

    private string _userInput;

    private bool _waitingResponse;

    private readonly List<Character> _suspects = [];

    private Character _victim;

    private string _scene;

    private List<string> _suggestedPrompts = [];
    
    private bool _ended;

    public void Dispose()
    {
        GameBoardService.Unbind(this);
    }

    protected override void OnInitialized()
    {
        GameBoardService.Bind(this);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(_userInput))
        {
            return;
        }
        
        _waitingResponse = true;
        _messages.Add(new("User", _userInput));
        _userInput = "";
        ChatMessage response = await GenerateLLMResponse();
        _messages.Add(response);
        _waitingResponse = false;
        _suggestedPrompts.Clear();
    }
    
    private async Task<ChatMessage> GenerateLLMResponse()
    {
        return new(
            "GM", 
            await GameMaster.ChatAsync(
                CampaignId,
                new ChatHistory(_messages.Select(m => new ChatMessageContent(AuthorRole.User, m.Text))), 
                default));
    }
    
    private MarkupString RenderMarkdown(string markdown)
    {
        string html = MarkdownService.RenderMarkdown(markdown);
        return new MarkupString(html);
    }
    
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !_waitingResponse)
        {
            await SendMessage();
        }
    }

    private async Task SuggestNextPrompt()
    {
        string history = string.Join("\n", _messages.Select(c => $"{c.Sender}: {c.Text}"));
        _suggestedPrompts = await GameMaster.SuggestNextPromptAsync(history, default);
    }

    public void OnVictimDisplayed(Character character)
    {
        _victim = character;
    }

    public void OnSuspectDisplayed(Character character)
    {
        if (!_suspects.Contains(character))
        {
            _suspects.Add(character);
        }
    }

    public void OnSceneChanged(string description)
    {
        _scene = description;
    }

    public void OnSessionEnded()
    {
        _ended = true;
    }
}
<div class="container">
    @if (_scene is not null)
    {
        <div class="row">
            Scene: @_scene
        </div>
    }
    <div class="row">
        <div class="col-lg-2">
            @if (_victim is not null)
            {
                <CharacterCardView Character="_victim"/>
            }
        </div>
        <div class="col-sm chat-container">
            <div class="chat-box">
                @foreach (ChatMessage message in _messages)
                {
                    <div class="chat-message">
                        <strong>@message.Sender :</strong> @RenderMarkdown(message.Text)
                    </div>
                }
            </div>
            <div class="chat-input">
                <input class="form-control" type="text" @bind="_userInput" @bind:event="oninput" @onkeyup="HandleKeyUp" disabled=@(_waitingResponse || _ended) />
                <button class="btn btn-primary" @onclick="SendMessage" disabled="@(_waitingResponse || _ended)">Submit</button>
                <button class="btn btn-secondary" @onclick="SuggestNextPrompt" disabled=@_ended>Suggest</button>
            </div>
            @if (_suggestedPrompts.Any())
            {
                <hr/>
                <div>
                    <h5>Suggestions</h5>
                    <ul>
                        @foreach (string suggestion in _suggestedPrompts)
                        {
                            <li><a @onclick="() => { _userInput = suggestion; }">@suggestion</a></li>
                        }
                    </ul>
                </div>
            }
        </div>
        @if (_suspects.Any())
        {
            <div class="col-lg-2 character-box">
                <h5>Suspects</h5>
                @foreach (Character suspect in _suspects)
                {
                    <CharacterCardView Character=@suspect/>
                }
            </div>
        }
    </div>
</div>
<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 80vh;
        margin: 0 auto;
        border: 1px solid #ccc;
        padding: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        border-bottom: 1px solid #ccc;
        margin-bottom: 10px;
    }

    .chat-message {
        margin-bottom: 10px;
    }

    .chat-input {
        display: flex;
    }

    .chat-input input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-right: 10px;
    }
    
    .character-box {
        height: 80vh;
        overflow: scroll;
    }
</style>

@implements IGameBoard;
@implements IDisposable;
