@page "/campaigns/{CampaignId:guid}/playground"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@inject GameMaster GameMaster
@inject MarkdownService MarkdownService
@inject GameBoardService GameBoardService
@inject PromptLoader PromptLoader
@inject SceneDirector SceneDirector;
@inject IJSRuntime JS
@inject NavigationManager Navigation

@code {
    [Parameter]
    public Guid CampaignId { get; set; }

    private bool InputBlocked => _waitingResponse || _ended;

    private ChatHistory _history = new();

    private string _userInput;

    private bool _waitingResponse;

    private readonly List<Character> _suspects = [];

    private Character _victim;

    private string _sceneTitle;

    private string _sceneDescription;

    private List<string> _suggestedPrompts = [];
    
    private bool _ended;

    private string _language;

    public void Dispose()
    {
        GameBoardService.Unbind(this);
    }

    protected override async Task OnInitializedAsync()
    {
        Uri uri = new(Navigation.Uri);
        Dictionary<string, StringValues> query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("lang", out StringValues lang))
        {
            _language = lang;
        }

        GameBoardService.Bind(this);
        string rule = PromptLoader.Load("Rule.md");
        _history.AddUserMessage(rule);

        string response = await ChatWithGameMasterAsync();
        _history.AddUserMessage(response);
    }

    private async Task<string> ChatWithGameMasterAsync()
    {
        _waitingResponse = true;
        try
        {
            string response = await GameMaster.ChatAsync(
                CampaignId,
                _history,
                _language,
                cancellationToken: default 
            );
            return response;
        }
        finally
        {
            _waitingResponse = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JS.InvokeVoidAsync("scrollToBottom", "chat-box");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(_userInput))
        {
            return;
        }

        _history.AddUserMessage($"Player: {_userInput}");
        _userInput = "";
        _suggestedPrompts.Clear();
        string response = await ChatWithGameMasterAsync();
        _history.AddUserMessage(response);
        await SceneDirector.InvokeAsync(
            CampaignId,
            _history,
            default);
    }
    
    private MarkupString RenderMarkdown(string markdown)
    {
        string html = MarkdownService.RenderMarkdown(markdown);
        return new MarkupString(html);
    }
    
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !_waitingResponse)
        {
            await SendMessage();
        }
    }

    private async Task SuggestNextPrompt()
    {
        _suggestedPrompts = await GameMaster.SuggestNextPromptAsync(_history, default);
    }

    private async Task RegeneratePrompt()
    {
        _history = new ChatHistory(_history.SkipLast(1));
        string response = await ChatWithGameMasterAsync();
        _history.AddUserMessage(response);
        await SceneDirector.InvokeAsync(
            CampaignId,
            _history,
            default);
    }

    public void DisplayVictim(Character character)
    {
        _victim = character;
    }

    public void DisplaySuspect(Character character)
    {
        if (!_suspects.Contains(character))
        {
            _suspects.Add(character);
        }
    }

    public void ChangeScene(string title, string description)
    {
        _sceneTitle = title;
        _sceneDescription = description;
    }

    public void EndSession()
    {
        _ended = true;
    }
}
<div class="container">
    <div class="row">
        <div class="col-lg-2">
            <h5>Victim</h5>
            <div class="campaign-box">
                @if (_victim is not null)
                {
                    <CharacterCardView Character="_victim"/>
                }
            </div>
        </div>
        <div class="col-sm">
            <h5>Messages</h5>
            <div class="chat-container">
                <div class="chat-box" id="chat-box">
                    @foreach (ChatMessageContent message in _history)
                    {
                        @if (message.Role == AuthorRole.User)
                        {
                            <div class="chat-message">
                                @RenderMarkdown(message.ToString())
                            </div>
                        }
                    }
                </div>
                <div class="chat-input">
                    <input class="form-control" type="text" @bind="_userInput" @bind:event="oninput" @onkeyup="HandleKeyUp" disabled=@InputBlocked/>
                    <button class="btn btn-primary" @onclick="SendMessage" disabled=@InputBlocked>Submit</button>
                    <button class="btn btn-secondary" @onclick="SuggestNextPrompt" disabled=@InputBlocked>Suggest</button>
                    <button class="btn btn-secondary" @onclick="RegeneratePrompt" disabled=@InputBlocked>
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
                @if (_suggestedPrompts.Any())
                {
                    <hr/>
                    <div class="suggestions">
                        <h5>Suggestions</h5>
                        <ul>
                            @foreach (string suggestion in _suggestedPrompts)
                            {
                                <li><a @onclick="() => { _userInput = suggestion; }">@suggestion</a></li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-2">
            <h5>Suspects</h5>
            <div class="character-box">
                @if (_suspects.Any())
                {
                    @foreach (Character suspect in _suspects)
                    {
                        <CharacterCardView Character=@suspect/>
                    }
                }
            </div>
        </div>
    </div>
    <div class="row">
        <h5>Scene</h5>
        @if (_sceneDescription is not null)
        {
            <div class="card">
                <p class="card-title">@_sceneTitle</p>
                <p class="card-body">
                    @RenderMarkdown(_sceneDescription)
                </p>
            </div>
        }
    </div>
</div>
<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 80vh;
        margin: 0 auto;
        border: 1px solid #ccc;
        padding: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        border-bottom: 1px solid #ccc;
        margin-bottom: 10px;
    }

    .chat-message {
        margin-bottom: 10px;
    }

    .chat-input {
        display: flex;
    }

    .chat-input input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-right: 10px;
    }
    
    .character-box, .campaign-box {
        height: 80vh;
        overflow-y: scroll;
        border: 1px solid #ccc;
        padding: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    
    .character-box::-webkit-scrollbar, .campaign-box::-webkit-scrollbar {
        display: none;
    }

    .suggestions li {
        cursor: pointer;
    }
</style>

<script>
    function scrollToBottom(elementId) {
        const element = document.getElementById(elementId);
        element.scrollTop = element.scrollHeight;
    }
</script>

@implements IGameBoard;
@implements IDisposable;
