@inject HttpClient HttpClient
@inject CampaignBuilder CampaignBuilder

<div class="character card col-sm-4">
    @if (Character.ProfilePicture is not null)
    {
        <img src="data:image/jpeg;base64,@Convert.ToBase64String(Character.ProfilePicture)" class="card-img-top"/>
    }
    <div class="card-body">
        <button type="button" @onclick="async () => { await CreatePortrait(); }" class="form-control btn" disabled="@_refreshingPortrait">
            @if (_refreshingPortrait)
            {
                <i class="fa-solid fa-spinner fa-spin"></i>
            }
            else
            {
                @:Refresh
            }
        </button>
        <label for=@($"character-{Character.Id}-name")>Name:</label>
        <InputText id=@($"character-{Character.Id}-name") @bind-Value="Character.Name" class="form-control"/>
        <label for=@($"character-{Character.Id}-age")>Age:</label>
        <InputNumber id=@($"character-{Character.Id}-age") @bind-Value="Character.Age" class="form-control"/>
        <label for=@($"character-{Character.Id}-description")>Description:</label>
        <InputTextArea id=@($"character-{Character.Id}-description") @bind-Value="Character.Description" class="form-control" disabled="@_enhancingDescription" rows="10"/>
        <button type="button" class="form-control btn" @onclick="EnhanceCharacterDescription" disabled="@_enhancingDescription">
            @if (_enhancingDescription)
            {
                <i class="fa-solid fa-spinner fa-spin"></i>
            }
            else
            {
                @:Enhance Description
            }
        </button>
    </div>
</div>

@code {
    [Parameter]
    public Character Character { get; set; }

    [Parameter]
    public string Background { get; set; }

    [Parameter]
    public Campaign Campaign { get; set; }
    
    private string _imgUrl = null;

    private bool _refreshingPortrait;

    private bool _enhancingDescription;

    protected override async Task OnParametersSetAsync()
    {
        if (Character.ProfilePicture is null)
        {
            await CreatePortrait();
        }
    }

    private async Task CreatePortrait()
    {
        _refreshingPortrait = true;
        _imgUrl = await CampaignBuilder.GeneratePortraitAsync(
            Background,
            Campaign.Plot,
            Character.Name,
            Character.Description,
            Character.Age,
            default
        );
        Character.ProfilePicture = await HttpClient.GetByteArrayAsync(_imgUrl);
        _refreshingPortrait = false;
    }

    private async Task EnhanceCharacterDescription()
    {
        _enhancingDescription = true;
        Character.Description = await CampaignBuilder.EnhanceCharacterDescriptionAsync(Campaign, Character, default);
        _enhancingDescription = false;
    }

}
