@inject HttpClient HttpClient
@inject CampaignBuilder CampaignBuilder

<div class="character card col-sm-4">
    @if (Character.ProfilePicture is not null)
    {
        <img src="data:image/jpeg;base64,@Convert.ToBase64String(Character.ProfilePicture)" class="card-img-top"/>
    }
    <div class="card-body">
        @if (_loading)
        {
            <div class="spinner card-img-top"></div>
        }
        else
        {
            <button type="button" @onclick="async () => { await CreatePortrait(); }" class="form-control btn">Refresh</button>
        }
        <label for=@($"character-{Character.Id}-name")>Name:</label>
        <InputText id=@($"character-{Character.Id}-name") @bind-Value="Character.Name" class="form-control"/>
        <label for=@($"character-{Character.Id}-age")>Age:</label>
        <InputNumber id=@($"character-{Character.Id}-age") @bind-Value="Character.Age" class="form-control"/>
        <label for=@($"character-{Character.Id}-description")>Description:</label>
        <InputTextArea id=@($"character-{Character.Id}-description") @bind-Value="Character.Description" class="form-control"/>
    </div>
</div>
<style>
    @@keyframes spinner {
        to {transform: rotate(360deg);}
    }

    .spinner {
        width: 50px;
        height: 50px;
        border: 3px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top-color: #000;
        animation: spinner 0.6s linear infinite;
        margin: auto;
    }
</style>

@code {
    [Parameter]
    public Character Character { get; set; }

    [Parameter]
    public string Background { get; set; }

    [Parameter]
    public string Plot { get; set; }
    
    private string _imgUrl = null;

    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        if (Character.ProfilePicture is null)
        {
            await CreatePortrait();
        }
    }

    private async Task CreatePortrait()
    {
        _loading = true;
        _imgUrl = await CampaignBuilder.GeneratePortraitAsync(
            Background,
            Plot,
            Character.Name,
            Character.Description,
            Character.Age,
            default
        );
        Character.ProfilePicture = await HttpClient.GetByteArrayAsync(_imgUrl);
        _loading = false;
    }
}
